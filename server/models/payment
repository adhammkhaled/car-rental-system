const db = require('../config/database'); // Import your database connection

exports.getPaymentDetails = async (orderNo) => {
  const query = `
    SELECT r.order_no, r.cust_id, r.plate_id, r.start_date, r.end_date, r.charge, 
           c.model, c.price_per_hour, c.plate_id, c.image_url, 
           p.payment_status, p.total_charge
    FROM Reserve r
    JOIN Car c ON r.plate_id = c.plate_id
    LEFT JOIN Payment p ON r.order_no = p.order_no
    WHERE r.order_no = ?
  `;

  const [rows] = await db.execute(query, [orderNo]);

  if (rows.length === 0) {
    return null;
  }

  const reservation = {
    order_no: rows[0].order_no,
    cust_id: rows[0].cust_id,
    plate_id: rows[0].plate_id,
    start_date: rows[0].start_date,
    end_date: rows[0].end_date,
    charge: rows[0].charge,
  };

  const car = {
    plate_id: rows[0].plate_id,
    model: rows[0].model,
    price_per_hour: rows[0].price_per_hour,
    image_url: rows[0].image_url,
  };

  const payment = {
    payment_status: rows[0].payment_status || 'pending',
    total_charge: rows[0].total_charge || reservation.charge,
  };

  return { reservation, car, payment };
};

exports.processPayment = async (orderNo) => {
  const connection = await db.getConnection();

  try {
    await connection.beginTransaction();

    // Check if payment already exists
    const [paymentRows] = await connection.execute(
      `SELECT * FROM Payment WHERE order_no = ?`,
      [orderNo]
    );

    if (paymentRows.length > 0 && paymentRows[0].payment_status === 'completed') {
      // Payment already completed
      await connection.rollback();
      return false;
    }

    // Insert or update payment record
    if (paymentRows.length === 0) {
      // Insert new payment record
      await connection.execute(
        `INSERT INTO Payment (order_no, total_charge, payment_status)
         SELECT order_no, charge, 'completed' FROM Reserve WHERE order_no = ?`,
        [orderNo]
      );
    } else {
      // Update existing payment record
      await connection.execute(
        `UPDATE Payment SET payment_status = 'completed', payment_date = NOW()
         WHERE order_no = ?`,
        [orderNo]
      );
    }

    // Update reservation status to 'completed'
    await connection.execute(
      `UPDATE Reserve SET reservation_status = 'completed' WHERE order_no = ?`,
      [orderNo]
    );

    await connection.commit();
    return true;
  } catch (error) {
    await connection.rollback();
    console.error('Error during payment processing transaction:', error);
    throw error;
  } finally {
    connection.release();
  }
};